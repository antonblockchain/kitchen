@mixin r($width) {
  @media only screen and (max-width: #{$width - 1px}) {
    @content;
  }
}

@mixin rmin($width) {
  @media only screen and (min-width: $width + "px") {
    @content;
  }
}

// height
@mixin rh($height) {
  @media only screen and (max-height: #{$height - 1px}) {
    @content;
  }
}

@mixin rhmin($height) {
  @media only screen and (min-height: $height + "px") {
    @content;
  }
}

@mixin retina {
  @media (-webkit-min-device-pixel-ratio: 2),
  (-o-min-device-pixel-ratio: 2/1),
  (min-resolution: 2dppx) {
    @content;
  }
}

@mixin text-overflow {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin gray {
  filter: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg'><filter id='grayscale'><feColorMatrix type='matrix' values='0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0'/></filter></svg>#grayscale");
  filter: gray;
  -webkit-filter: grayscale(100%);
  filter: progid:DXImageTransform.Microsoft.BasicImage(grayScale=1);
  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(grayScale=1)";
}

@mixin gray-half {
  filter: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg'><filter id='grayscale'><feColorMatrix type='saturate' values='0.5'/></filter></svg>#grayscale");
  filter: gray alpha(opacity=50);
  -webkit-filter: grayscale(50%);
}

@mixin gray-zero {
  filter: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg'><filter id='grayscale'><feColorMatrix type='matrix' values='1 0 0 0 0, 0 1 0 0 0, 0 0 1 0 0, 0 0 0 1 0'/></filter></svg>#grayscale");
  -webkit-filter: grayscale(0%);
}

@mixin gpu {
  transform: translate3d(0, 0, 0);
}

@mixin scrollbar {
  &::-webkit-scrollbar {
    @content;
  }
}

@mixin scrollbar-track {
  &::-webkit-scrollbar-track {
    @content;
  }
}

@mixin scrollbar-thumb {
  &::-webkit-scrollbar-thumb {
    @content;
  }
}

@mixin scrollbar-track-piece {
  &::-webkit-scrollbar-track-piece {
    @content;
  }
}

//triangle
@mixin arr($width, $height, $bg, $direction) {
  width: 0px;
  height: 0px;
  border-style: solid;

  @if $direction == t {
    border-width: 0 ($width / 2 + px) ($height + px) ($width / 2 + px);
    border-color: transparent transparent $bg transparent;
  }

  @if $direction == r {
    border-width: ($height / 2 + px) 0 ($height / 2 + px) ($width + px);
    border-color: transparent transparent transparent $bg;
  }

  @if $direction == b {
    border-width: ($height + px) ($width / 2 + px) 0 ($width / 2 + px);
    border-color: $bg transparent transparent transparent;
  }

  @if $direction == l {
    border-width: ($height / 2 + px) ($width + px) ($height / 2 + px) 0;
    border-color: transparent $bg transparent transparent;
  }

  @if $direction == tl {
    border-width: ($height + px) ($width + px) 0 0;
    border-color: $bg transparent transparent transparent;
  }

  @if $direction == tr {
    border-width: 0 ($width + px) ($height + px) 0;
    border-color: transparent $bg transparent transparent;
  }

  @if $direction == br {
    border-width: 0 0 ($height + px) ($width + px);
    border-color: transparent transparent $bg transparent;
  }

  @if $direction == bl {
    border-width: ($width + px) 0 0 ($height + px);
    border-color: transparent transparent transparent $bg;
  }
}

// example
// +arr(500,50, #000, l)
// +arr(500,50, #000, bl)

@mixin blur($radius) {
  filter: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='a' x='0' y='0' width='1' height='1' color-interpolation-filters='sRGB'%3E%3CfeGaussianBlur stdDeviation='#{$radius}' result='b'/%3E%3CfeMorphology operator='dilate' radius='#{$radius}'/%3E %3CfeMerge%3E%3CfeMergeNode/%3E%3CfeMergeNode in='b'/%3E%3C/feMerge%3E%3C/filter%3E %3C/svg%3E#a");
}

@mixin counter($var, $sep) {
  counter-reset: list + $var;
  > li {
    &:before {
      content: counter(list + $var) $sep;
      counter-increment: list + $var;
    }
  }
}

@function em($size, $context: 16) {
  @return $size / $context * 1em;
}

@mixin trans($what: all, $dur: 0.2s, $easing: ease-in-out) {
  transition: $what $dur $easing;
}

@mixin xxl {
  @include r($xxl) {
    @content;
  }
}

@mixin xl {
  @include r($xl) {
    @content;
  }
}

@mixin lg {
  @include r($lg) {
    @content;
  }
}

@mixin md {
  @include r($md) {
    @content;
  }
}

@mixin sm {
  @include r($sm) {
    @content;
  }
}

@mixin xs {
  @include r($xs) {
    @content;
  }
}